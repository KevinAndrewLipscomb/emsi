//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ConEdLink.WebReference_emsams {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EMSREGWebServicesSoap", Namespace="https://tempurl.org/")]
    public partial class EMSREGWebServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ProcessConedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessStudentAppOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessTestResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessNROperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public EMSREGWebServices() {
            Url = global::ConEdLink.Properties.Settings.Default.ConEdLink_WebReference_emsams_EMSREGWebServices;
            if ((IsLocalFileSystemWebService(Url) == true)) {
                UseDefaultCredentials = true;
                useDefaultCredentialsSetExplicitly = false;
            }
            else {
                useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((IsLocalFileSystemWebService(base.Url) == true) 
                            && (useDefaultCredentialsSetExplicitly == false)) 
                            && (IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ProcessConedCompletedEventHandler ProcessConedCompleted;
        
        /// <remarks/>
        public event ProcessStudentAppCompletedEventHandler ProcessStudentAppCompleted;
        
        /// <remarks/>
        public event ProcessTestResultCompletedEventHandler ProcessTestResultCompleted;
        
        /// <remarks/>
        public event ProcessNRCompletedEventHandler ProcessNRCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://tempurl.org/ProcessConed", RequestNamespace="https://tempurl.org/", ResponseNamespace="https://tempurl.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcessConed(string strXML) {
            object[] results = Invoke("ProcessConed", new object[] {
                        strXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessConedAsync(string strXML) {
            ProcessConedAsync(strXML, null);
        }
        
        /// <remarks/>
        public void ProcessConedAsync(string strXML, object userState) {
            if ((ProcessConedOperationCompleted == null)) {
                ProcessConedOperationCompleted = new System.Threading.SendOrPostCallback(OnProcessConedOperationCompleted);
            }
            InvokeAsync("ProcessConed", new object[] {
                        strXML}, ProcessConedOperationCompleted, userState);
        }
        
        private void OnProcessConedOperationCompleted(object arg) {
            if ((ProcessConedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                ProcessConedCompleted(this, new ProcessConedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://tempurl.org/ProcessStudentApp", RequestNamespace="https://tempurl.org/", ResponseNamespace="https://tempurl.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcessStudentApp(string strXML) {
            object[] results = Invoke("ProcessStudentApp", new object[] {
                        strXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessStudentAppAsync(string strXML) {
            ProcessStudentAppAsync(strXML, null);
        }
        
        /// <remarks/>
        public void ProcessStudentAppAsync(string strXML, object userState) {
            if ((ProcessStudentAppOperationCompleted == null)) {
                ProcessStudentAppOperationCompleted = new System.Threading.SendOrPostCallback(OnProcessStudentAppOperationCompleted);
            }
            InvokeAsync("ProcessStudentApp", new object[] {
                        strXML}, ProcessStudentAppOperationCompleted, userState);
        }
        
        private void OnProcessStudentAppOperationCompleted(object arg) {
            if ((ProcessStudentAppCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                ProcessStudentAppCompleted(this, new ProcessStudentAppCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://tempurl.org/ProcessTestResult", RequestNamespace="https://tempurl.org/", ResponseNamespace="https://tempurl.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcessTestResult(string strXML) {
            object[] results = Invoke("ProcessTestResult", new object[] {
                        strXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessTestResultAsync(string strXML) {
            ProcessTestResultAsync(strXML, null);
        }
        
        /// <remarks/>
        public void ProcessTestResultAsync(string strXML, object userState) {
            if ((ProcessTestResultOperationCompleted == null)) {
                ProcessTestResultOperationCompleted = new System.Threading.SendOrPostCallback(OnProcessTestResultOperationCompleted);
            }
            InvokeAsync("ProcessTestResult", new object[] {
                        strXML}, ProcessTestResultOperationCompleted, userState);
        }
        
        private void OnProcessTestResultOperationCompleted(object arg) {
            if ((ProcessTestResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                ProcessTestResultCompleted(this, new ProcessTestResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://tempurl.org/ProcessNR", RequestNamespace="https://tempurl.org/", ResponseNamespace="https://tempurl.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcessNR(string strXML) {
            object[] results = Invoke("ProcessNR", new object[] {
                        strXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessNRAsync(string strXML) {
            ProcessNRAsync(strXML, null);
        }
        
        /// <remarks/>
        public void ProcessNRAsync(string strXML, object userState) {
            if ((ProcessNROperationCompleted == null)) {
                ProcessNROperationCompleted = new System.Threading.SendOrPostCallback(OnProcessNROperationCompleted);
            }
            InvokeAsync("ProcessNR", new object[] {
                        strXML}, ProcessNROperationCompleted, userState);
        }
        
        private void OnProcessNROperationCompleted(object arg) {
            if ((ProcessNRCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                ProcessNRCompleted(this, new ProcessNRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ProcessConedCompletedEventHandler(object sender, ProcessConedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessConedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessConedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                RaiseExceptionIfNecessary();
                return ((string)(results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ProcessStudentAppCompletedEventHandler(object sender, ProcessStudentAppCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessStudentAppCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessStudentAppCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                RaiseExceptionIfNecessary();
                return ((string)(results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ProcessTestResultCompletedEventHandler(object sender, ProcessTestResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessTestResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessTestResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                RaiseExceptionIfNecessary();
                return ((string)(results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ProcessNRCompletedEventHandler(object sender, ProcessNRCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessNRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessNRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                RaiseExceptionIfNecessary();
                return ((string)(results[0]));
            }
        }
    }
}

#pragma warning restore 1591